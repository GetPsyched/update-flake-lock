{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as actionsCore from \"@actions/core\";\nimport * as actionsExec from \"@actions/exec\";\nimport * as actionsGithub from \"@actions/github\";\nimport { readFileSync } from \"fs\";\n\nasync function updateFlakeLock(options?: {\n  inputs?: string[];\n  nixOptions?: string[];\n  workingDirectory?: string;\n}) {\n  // Run update-flake-lock.sh\n  // await actionsExec.exec(\"./update-flake-lock.sh\", [], {\n  //   env: {\n  //     COMMIT_MSG: actionsCore.getInput(\"commit-msg\"),\n  //     GIT_AUTHOR_NAME: authorName,\n  //     GIT_AUTHOR_EMAIL: authorEmail,\n  //     GIT_COMMITTER_NAME: committerName,\n  //     GIT_COMMITTER_EMAIL: committerEmail,\n  //     // Explicitly specify Nix path since it's not automatically picked up.\n  //     NIX_BINARY: await actionsIo.which(\"nix\", true),\n  //     NIX_OPTIONS: actionsCore.getInput(\"nix-options\"),\n  //     PATH_TO_FLAKE_DIR: actionsCore.getInput(\"path-to-flake-dir\"),\n  //     TARGETS: actionsCore.getInput(\"inputs\"),\n  //   },\n  // });\n  const flakeUpdatesWithWarning = (\n    await actionsExec.getExecOutput(\n      \"nix flake update\",\n      [\n        \"--no-warn-dirty\",\n        // FIXME: `--update-input` is not a recognised flag\n        //  ...inputs.map((input) => `--update-input ${input}`)\n      ],\n      { cwd: options?.workingDirectory },\n    )\n  ).stderr;\n  if (!flakeUpdatesWithWarning) return \"\";\n\n  const [warning, ...flakeUpdates] = flakeUpdatesWithWarning.split(\"\\n\");\n  return [\"Flake lock file updates:\", \"\", ...flakeUpdates].join(\"\\n\").trim();\n}\n\nasync function createNewBranch(token: string, base: string, head: string) {\n  const octokit = actionsGithub.getOctokit(token);\n\n  const repoDetails = await octokit.rest.repos.get({\n    ...actionsGithub.context.repo,\n  });\n  const baseBranch = base ? base : repoDetails.data.default_branch;\n\n  const branches = await octokit.rest.repos.listBranches({\n    ...actionsGithub.context.repo,\n  });\n  if (!branches.data.some((branch) => branch.name === head)) {\n    const baseBranchRef = await octokit.rest.git.getRef({\n      ...actionsGithub.context.repo,\n      ref: `heads/${baseBranch}`,\n    });\n\n    await octokit.rest.git.createRef({\n      ...actionsGithub.context.repo,\n      ref: `refs/heads/${head}`,\n      sha: baseBranchRef.data.object.sha,\n    });\n  }\n\n  return [baseBranch, head];\n}\n\nasync function commit(\n  token: string,\n  headBranch: string,\n  author: { name: string; email: string },\n  committer: { name: string; email: string },\n) {\n  const octokit = actionsGithub.getOctokit(token);\n\n  const inputs = actionsCore.getInput(\"inputs\").split(\" \");\n  const pathToFlakeDir = actionsCore.getInput(\"path-to-flake-dir\");\n  const flakeChangelog = await updateFlakeLock({\n    inputs: inputs,\n    workingDirectory: pathToFlakeDir,\n  });\n  if (!flakeChangelog) return \"\";\n\n  const blob = await octokit.rest.git.createBlob({\n    ...actionsGithub.context.repo,\n    content: readFileSync(`${pathToFlakeDir}flake.lock`, \"utf-8\"),\n    encoding: \"base64\",\n  });\n\n  const currentCommit = await octokit.rest.repos.getCommit({\n    ...actionsGithub.context.repo,\n    ref: `heads/${headBranch}`,\n  });\n\n  const tree = await octokit.rest.git.createTree({\n    ...actionsGithub.context.repo,\n    base_tree: currentCommit.data.commit.tree.sha,\n    tree: [\n      {\n        path: `${pathToFlakeDir}flake.lock`,\n        mode: \"100644\",\n        type: \"blob\",\n        sha: blob.data.sha,\n      },\n    ],\n  });\n\n  if (tree.data.sha === currentCommit.data.commit.tree.sha) {\n    console.log(\"Working tree is clean, skipping commit.\");\n    return \"\";\n  }\n\n  const newCommit = await octokit.rest.git.createCommit({\n    ...actionsGithub.context.repo,\n    author: author,\n    committer: committer,\n    message: `${actionsCore.getInput(\"commit-msg\")}\\n\\n${flakeChangelog}`,\n    tree: tree.data.sha,\n    parents: [currentCommit.data.sha],\n  });\n\n  await octokit.rest.git.updateRef({\n    ...actionsGithub.context.repo,\n    ref: `heads/${headBranch}`,\n    sha: newCommit.data.sha,\n    force: true,\n  });\n\n  // // Set additional env variables (GIT_COMMIT_MESSAGE)\n  // const delimiter = (\n  //   await actionsExec.getExecOutput(\"base64\", [], {\n  //     input: Buffer.from(\n  //       (\n  //         await actionsExec.getExecOutput(\n  //           \"dd if=/dev/urandom bs=15 count=1 status=none\",\n  //         )\n  //       ).stdout,\n  //     ),\n  //   })\n  // ).stdout;\n  // const commitMessage = (\n  //   await actionsExec.getExecOutput(\"git log --format=%b -n 1\")\n  // ).stdout;\n  // // TODO: GITHUB_ENV insertions\n  // // echo \"GIT_COMMIT_MESSAGE<<$DELIMITER\" >> $GITHUB_ENV\n  // // echo \"$COMMIT_MESSAGE\" >> $GITHUB_ENV\n  // // echo \"$DELIMITER\" >> $GITHUB_ENV\n  // console.log(\"GIT_COMMIT_MESSAGE is:\", commitMessage);\n\n  return flakeChangelog;\n}\n\nasync function main() {\n  let authorName;\n  let authorEmail;\n  let committerName;\n  let committerEmail;\n\n  if (actionsCore.getBooleanInput(\"sign-commits\")) {\n    // Import bot's GPG key for signing commits\n    const gpgPrivateKey = actionsCore.getInput(\"gpg-private-key\");\n    const gpgFingerprint = actionsCore.getInput(\"gpg-fingerprint\");\n    const gpgPassphrase = actionsCore.getInput(\"gpg-passphrase\");\n    const git_config_global = true;\n    const git_user_signingkey = true;\n    const git_commit_gpgsign = true;\n\n    // Set environment variables (signed commits)\n    authorName = \"\";\n    authorEmail = \"\";\n    committerName = \"\";\n    committerEmail = \"\";\n    // TODO: GITHUB_ENV insertions\n    // echo \"GIT_AUTHOR_NAME=$GIT_AUTHOR_NAME\" >> $GITHUB_ENV\n    // echo \"GIT_AUTHOR_EMAIL=<$GIT_AUTHOR_EMAIL>\" >> $GITHUB_ENV\n    // echo \"GIT_COMMITTER_NAME=$GIT_COMMITTER_NAME\" >> $GITHUB_ENV\n    // echo \"GIT_COMMITTER_EMAIL=<$GIT_COMMITTER_EMAIL>\" >> $GITHUB_ENV\n\n    // FIXME: Figure out how to do gpg stuff\n    const gpgOutputs = await actionsExec.getExecOutput(\"some command here\");\n  } else {\n    // Set environment variables (unsigned commits)\n    authorName = actionsCore.getInput(\"git-author-name\");\n    authorEmail = actionsCore.getInput(\"git-author-email\");\n    committerName = actionsCore.getInput(\"git-committer-name\");\n    committerEmail = actionsCore.getInput(\"git-committer-email\");\n  }\n\n  const token = actionsCore.getInput(\"token\");\n  const [baseBranch, headBranch] = await createNewBranch(\n    token,\n    actionsCore.getInput(\"base\"),\n    actionsCore.getInput(\"branch\"),\n  );\n  const flakeChangelog = await commit(\n    token,\n    headBranch,\n    { name: authorName, email: authorEmail },\n    { name: committerName, email: committerEmail },\n  );\n  if (!flakeChangelog) {\n    console.log(\"flake.lock is up to date. Exiting.\");\n    return;\n  }\n\n  const octokit = actionsGithub.getOctokit(token);\n  const existingPR = await octokit.rest.pulls.list({\n    ...actionsGithub.context.repo,\n    head: headBranch,\n  });\n  if (existingPR.data.length !== 0) {\n    console.log(\n      `Skipping PR creation, it already exists at ${existingPR.data[0].html_url}`,\n    );\n    return;\n  }\n  const pullRequest = await octokit.rest.pulls.create({\n    ...actionsGithub.context.repo,\n    base: baseBranch,\n    head: headBranch,\n\n    title: actionsCore.getInput(\"pr-title\"),\n    body: actionsCore\n      .getInput(\"pr-body\")\n      // FIXME: Figure out why GH isn't replacing env vars with their values\n      .replace(\"{{ env.GIT_COMMIT_MESSAGE }}\", flakeChangelog),\n\n    // FIXME: Figure out how to add the following missing attributes:\n    //   - delete-branch\n    //   - committer\n    //   - author\n    //   - assignees\n    //   - reviewers\n  });\n\n  const prLabels = actionsCore\n    .getInput(\"pr-labels\")\n    .split(\",\")\n    .flatMap((label) => label.split(\"\\n\"))\n    .filter((label) => !!label);\n  console.log(\"raw\", actionsCore.getInput(\"pr-labels\"));\n  console.log(\"formatted\", prLabels);\n\n  await octokit.rest.issues.addLabels({\n    ...actionsGithub.context.repo,\n    issue_number: pullRequest.data.number,\n    labels: prLabels,\n  });\n}\n\nmain();\n"],"mappings":"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","names":[]}