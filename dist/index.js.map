{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as actionsCore from \"@actions/core\";\nimport * as actionsExec from \"@actions/exec\";\nimport * as actionsGithub from \"@actions/github\";\n\nasync function main() {\n  let authorName;\n  let authorEmail;\n  let committerName;\n  let committerEmail;\n\n  if (actionsCore.getBooleanInput(\"sign-commits\")) {\n    // Import bot's GPG key for signing commits\n    const gpgPrivateKey = actionsCore.getInput(\"gpg-private-key\");\n    const gpgFingerprint = actionsCore.getInput(\"gpg-fingerprint\");\n    const gpgPassphrase = actionsCore.getInput(\"gpg-passphrase\");\n    const git_config_global = true;\n    const git_user_signingkey = true;\n    const git_commit_gpgsign = true;\n\n    // Set environment variables (signed commits)\n    authorName = \"\";\n    authorEmail = \"\";\n    committerName = \"\";\n    committerEmail = \"\";\n    // TODO: GITHUB_ENV insertions\n    // echo \"GIT_AUTHOR_NAME=$GIT_AUTHOR_NAME\" >> $GITHUB_ENV\n    // echo \"GIT_AUTHOR_EMAIL=<$GIT_AUTHOR_EMAIL>\" >> $GITHUB_ENV\n    // echo \"GIT_COMMITTER_NAME=$GIT_COMMITTER_NAME\" >> $GITHUB_ENV\n    // echo \"GIT_COMMITTER_EMAIL=<$GIT_COMMITTER_EMAIL>\" >> $GITHUB_ENV\n\n    // FIXME: Figure out how to do gpg stuff\n    const gpgOutputs = await actionsExec.getExecOutput(\"some command here\");\n  } else {\n    // Set environment variables (unsigned commits)\n    authorName = actionsCore.getInput(\"git-author-name\");\n    authorEmail = actionsCore.getInput(\"git-author-email\");\n    committerName = actionsCore.getInput(\"git-committer-name\");\n    committerEmail = actionsCore.getInput(\"git-committer-email\");\n  }\n\n  actionsCore.exportVariable(\"GIT_AUTHOR_NAME\", authorName);\n  actionsCore.exportVariable(\"GIT_AUTHOR_EMAIL\", authorEmail);\n  actionsCore.exportVariable(\"GIT_COMMITTER_NAME\", committerName);\n  actionsCore.exportVariable(\"GIT_COMMITTER_EMAIL\", committerEmail);\n\n  // Run update-flake-lock.sh\n  await actionsExec.exec(\"./update-flake-lock.sh\", [], {\n    env: {\n      COMMIT_MSG: actionsCore.getInput(\"commit-msg\"),\n      GIT_AUTHOR_NAME: authorName,\n      GIT_AUTHOR_EMAIL: authorEmail,\n      GIT_COMMITTER_NAME: committerName,\n      GIT_COMMITTER_EMAIL: committerEmail,\n      NIX_OPTIONS: actionsCore.getInput(\"nix-options\"),\n      PATH_TO_FLAKE_DIR: actionsCore.getInput(\"path-to-flake-dir\"),\n      TARGETS: actionsCore.getInput(\"inputs\"),\n    },\n  });\n\n  // Set additional env variables (GIT_COMMIT_MESSAGE)\n  const delimiter = (\n    await actionsExec.getExecOutput(\"base64\", [], {\n      input: Buffer.from(\n        (\n          await actionsExec.getExecOutput(\n            \"dd if=/dev/urandom bs=15 count=1 status=none\",\n          )\n        ).stdout,\n      ),\n    })\n  ).stdout;\n  const commitMessage = (\n    await actionsExec.getExecOutput(\"git log --format=%b -n 1\")\n  ).stdout;\n  // TODO: GITHUB_ENV insertions\n  // echo \"GIT_COMMIT_MESSAGE<<$DELIMITER\" >> $GITHUB_ENV\n  // echo \"$COMMIT_MESSAGE\" >> $GITHUB_ENV\n  // echo \"$DELIMITER\" >> $GITHUB_ENV\n  console.log(\"GIT_COMMIT_MESSAGE is:\", commitMessage);\n\n  // Create PR\n  const token = actionsCore.getInput(\"token\");\n  const octokit = actionsGithub.getOctokit(token);\n  await octokit.rest.pulls.create({\n    ...actionsGithub.context.repo,\n    base: actionsCore.getInput(\"base\"),\n    head: actionsCore.getInput(\"branch\"),\n\n    title: actionsCore.getInput(\"pr-title\"),\n    body: actionsCore.getInput(\"pr-body\"),\n\n    // FIXME: Figure out how to add the following missing attributes:\n    //   - delete-branch\n    //   - committer\n    //   - author\n    //   - assignees\n    //   - labels\n    //   - reviewers\n  });\n}\n\nmain();\n"],"mappings":";AAAA,YAAY,iBAAiB;AAC7B,YAAY,iBAAiB;AAC7B,YAAY,mBAAmB;AAE/B,eAAe,OAAO;AACpB,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,MAAgB,4BAAgB,cAAc,GAAG;AAE/C,UAAM,gBAA4B,qBAAS,iBAAiB;AAC5D,UAAM,iBAA6B,qBAAS,iBAAiB;AAC7D,UAAM,gBAA4B,qBAAS,gBAAgB;AAC3D,UAAM,oBAAoB;AAC1B,UAAM,sBAAsB;AAC5B,UAAM,qBAAqB;AAG3B,iBAAa;AACb,kBAAc;AACd,oBAAgB;AAChB,qBAAiB;AAQjB,UAAM,aAAa,MAAkB,0BAAc,mBAAmB;AAAA,EACxE,OAAO;AAEL,iBAAyB,qBAAS,iBAAiB;AACnD,kBAA0B,qBAAS,kBAAkB;AACrD,oBAA4B,qBAAS,oBAAoB;AACzD,qBAA6B,qBAAS,qBAAqB;AAAA,EAC7D;AAEA,EAAY,2BAAe,mBAAmB,UAAU;AACxD,EAAY,2BAAe,oBAAoB,WAAW;AAC1D,EAAY,2BAAe,sBAAsB,aAAa;AAC9D,EAAY,2BAAe,uBAAuB,cAAc;AAGhE,QAAkB,iBAAK,0BAA0B,CAAC,GAAG;AAAA,IACnD,KAAK;AAAA,MACH,YAAwB,qBAAS,YAAY;AAAA,MAC7C,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,aAAyB,qBAAS,aAAa;AAAA,MAC/C,mBAA+B,qBAAS,mBAAmB;AAAA,MAC3D,SAAqB,qBAAS,QAAQ;AAAA,IACxC;AAAA,EACF,CAAC;AAGD,QAAM,aACJ,MAAkB,0BAAc,UAAU,CAAC,GAAG;AAAA,IAC5C,OAAO,OAAO;AAAA,OAEV,MAAkB;AAAA,QAChB;AAAA,MACF,GACA;AAAA,IACJ;AAAA,EACF,CAAC,GACD;AACF,QAAM,iBACJ,MAAkB,0BAAc,0BAA0B,GAC1D;AAKF,UAAQ,IAAI,0BAA0B,aAAa;AAGnD,QAAM,QAAoB,qBAAS,OAAO;AAC1C,QAAM,UAAwB,yBAAW,KAAK;AAC9C,QAAM,QAAQ,KAAK,MAAM,OAAO;AAAA,IAC9B,GAAiB,sBAAQ;AAAA,IACzB,MAAkB,qBAAS,MAAM;AAAA,IACjC,MAAkB,qBAAS,QAAQ;AAAA,IAEnC,OAAmB,qBAAS,UAAU;AAAA,IACtC,MAAkB,qBAAS,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAStC,CAAC;AACH;AAEA,KAAK;","names":[]}