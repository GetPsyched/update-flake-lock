{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as actionsCore from \"@actions/core\";\nimport * as actionsExec from \"@actions/exec\";\nimport * as actionsGithub from \"@actions/github\";\nimport { readFileSync } from \"fs\";\n\nasync function main() {\n  let authorName;\n  let authorEmail;\n  let committerName;\n  let committerEmail;\n\n  if (actionsCore.getBooleanInput(\"sign-commits\")) {\n    // Import bot's GPG key for signing commits\n    const gpgPrivateKey = actionsCore.getInput(\"gpg-private-key\");\n    const gpgFingerprint = actionsCore.getInput(\"gpg-fingerprint\");\n    const gpgPassphrase = actionsCore.getInput(\"gpg-passphrase\");\n    const git_config_global = true;\n    const git_user_signingkey = true;\n    const git_commit_gpgsign = true;\n\n    // Set environment variables (signed commits)\n    authorName = \"\";\n    authorEmail = \"\";\n    committerName = \"\";\n    committerEmail = \"\";\n    // TODO: GITHUB_ENV insertions\n    // echo \"GIT_AUTHOR_NAME=$GIT_AUTHOR_NAME\" >> $GITHUB_ENV\n    // echo \"GIT_AUTHOR_EMAIL=<$GIT_AUTHOR_EMAIL>\" >> $GITHUB_ENV\n    // echo \"GIT_COMMITTER_NAME=$GIT_COMMITTER_NAME\" >> $GITHUB_ENV\n    // echo \"GIT_COMMITTER_EMAIL=<$GIT_COMMITTER_EMAIL>\" >> $GITHUB_ENV\n\n    // FIXME: Figure out how to do gpg stuff\n    const gpgOutputs = await actionsExec.getExecOutput(\"some command here\");\n  } else {\n    // Set environment variables (unsigned commits)\n    authorName = actionsCore.getInput(\"git-author-name\");\n    authorEmail = actionsCore.getInput(\"git-author-email\");\n    committerName = actionsCore.getInput(\"git-committer-name\");\n    committerEmail = actionsCore.getInput(\"git-committer-email\");\n  }\n\n  actionsCore.exportVariable(\"GIT_AUTHOR_NAME\", authorName);\n  actionsCore.exportVariable(\"GIT_AUTHOR_EMAIL\", authorEmail);\n  actionsCore.exportVariable(\"GIT_COMMITTER_NAME\", committerName);\n  actionsCore.exportVariable(\"GIT_COMMITTER_EMAIL\", committerEmail);\n\n  const token = actionsCore.getInput(\"token\");\n  const octokit = actionsGithub.getOctokit(token);\n\n  const repoDetails = await octokit.rest.repos.get({\n    ...actionsGithub.context.repo,\n  });\n  const baseBranch = actionsCore.getInput(\"base\")\n    ? actionsCore.getInput(\"base\")\n    : repoDetails.data.default_branch;\n  const baseBranchRef = await octokit.rest.git.getRef({\n    ...actionsGithub.context.repo,\n    ref: `heads/${baseBranch}`,\n  });\n  const headBranch = actionsCore.getInput(\"branch\");\n  const branches = await octokit.rest.repos.listBranches({\n    ...actionsGithub.context.repo,\n  });\n  if (!branches.data.some((branch) => branch.name === headBranch)) {\n    await octokit.rest.git.createRef({\n      ...actionsGithub.context.repo,\n      ref: `refs/heads/${headBranch}`,\n      sha: baseBranchRef.data.object.sha,\n    });\n  }\n\n  // Run update-flake-lock.sh\n  // await actionsExec.exec(\"./update-flake-lock.sh\", [], {\n  //   env: {\n  //     COMMIT_MSG: actionsCore.getInput(\"commit-msg\"),\n  //     GIT_AUTHOR_NAME: authorName,\n  //     GIT_AUTHOR_EMAIL: authorEmail,\n  //     GIT_COMMITTER_NAME: committerName,\n  //     GIT_COMMITTER_EMAIL: committerEmail,\n  //     // Explicitly specify Nix path since it's not automatically picked up.\n  //     NIX_BINARY: await actionsIo.which(\"nix\", true),\n  //     NIX_OPTIONS: actionsCore.getInput(\"nix-options\"),\n  //     PATH_TO_FLAKE_DIR: actionsCore.getInput(\"path-to-flake-dir\"),\n  //     TARGETS: actionsCore.getInput(\"inputs\"),\n  //   },\n  // });\n  const inputs = actionsCore.getInput(\"inputs\").split(\" \");\n  const flakeDir = actionsCore.getInput(\"path-to-flake-dir\");\n  const flakeUpdatesWithWarning = (\n    await actionsExec.getExecOutput(\n      \"nix flake update\",\n      [\n        \"--no-warn-dirty\",\n        // FIXME: `--update-input` is not a recognised flag\n        //  ...inputs.map((input) => `--update-input ${input}`)\n      ],\n      { cwd: flakeDir },\n    )\n  ).stderr;\n  if (!flakeUpdatesWithWarning) return;\n  const [warning, ...flakeUpdates] = flakeUpdatesWithWarning.split(\"\\n\");\n  const flakeUpdatesString = [\"Flake lock file updates:\", \"\", flakeUpdates]\n    .join(\"\\n\")\n    .trim();\n\n  const blob = await octokit.rest.git.createBlob({\n    ...actionsGithub.context.repo,\n    content: readFileSync(`${flakeDir}flake.lock`, \"utf-8\"),\n    encoding: \"base64\",\n  });\n\n  const currentCommit = await octokit.rest.repos.getCommit({\n    ...actionsGithub.context.repo,\n    ref: `heads/${headBranch}`,\n  });\n\n  const tree = await octokit.rest.git.createTree({\n    ...actionsGithub.context.repo,\n    base_tree: currentCommit.data.commit.tree.sha,\n    tree: [\n      {\n        path: `${flakeDir}flake.lock`,\n        mode: \"100644\",\n        type: \"blob\",\n        sha: blob.data.sha,\n      },\n    ],\n  });\n\n  const newCommit = await octokit.rest.git.createCommit({\n    ...actionsGithub.context.repo,\n    author: { name: authorName, email: authorEmail },\n    committer: { name: committerName, email: committerEmail },\n    message: `${actionsCore.getInput(\"commit-msg\")}\\n\\n${flakeUpdatesString}`,\n    tree: tree.data.sha,\n    parents: [currentCommit.data.sha],\n  });\n\n  await octokit.rest.git.updateRef({\n    ...actionsGithub.context.repo,\n    ref: `heads/${headBranch}`,\n    sha: newCommit.data.sha,\n    force: true,\n  });\n\n  // Set additional env variables (GIT_COMMIT_MESSAGE)\n  const delimiter = (\n    await actionsExec.getExecOutput(\"base64\", [], {\n      input: Buffer.from(\n        (\n          await actionsExec.getExecOutput(\n            \"dd if=/dev/urandom bs=15 count=1 status=none\",\n          )\n        ).stdout,\n      ),\n    })\n  ).stdout;\n  const commitMessage = (\n    await actionsExec.getExecOutput(\"git log --format=%b -n 1\")\n  ).stdout;\n  // TODO: GITHUB_ENV insertions\n  // echo \"GIT_COMMIT_MESSAGE<<$DELIMITER\" >> $GITHUB_ENV\n  // echo \"$COMMIT_MESSAGE\" >> $GITHUB_ENV\n  // echo \"$DELIMITER\" >> $GITHUB_ENV\n  console.log(\"GIT_COMMIT_MESSAGE is:\", commitMessage);\n\n  // Create PR\n  await octokit.rest.pulls.create({\n    ...actionsGithub.context.repo,\n    base: baseBranch,\n    head: headBranch,\n\n    title: actionsCore.getInput(\"pr-title\"),\n    body: actionsCore\n      .getInput(\"pr-body\")\n      // FIXME: Figure out why GH isn't replacing env vars with their values\n      .replace(\"{{ env.GIT_COMMIT_MESSAGE }}\", flakeUpdatesString),\n\n    // FIXME: Figure out how to add the following missing attributes:\n    //   - delete-branch\n    //   - committer\n    //   - author\n    //   - assignees\n    //   - labels\n    //   - reviewers\n  });\n}\n\nmain();\n"],"mappings":"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","names":[]}